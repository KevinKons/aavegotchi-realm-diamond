/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  InstallationDiamond,
  InstallationDiamondInterface,
} from "../InstallationDiamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemId",
        type: "uint256",
      },
    ],
    name: "getInstallationType",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "installationId",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "installationType",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "level",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "alchemicaType",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "fudCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fomoCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "alphaCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "kekCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "craftTime",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamond.Installation",
        name: "installationType",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_itemIds",
        type: "uint256[]",
      },
    ],
    name: "getInstallationTypes",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "installationId",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "installationType",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "level",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "width",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "height",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "alchemicaType",
            type: "uint16",
          },
          {
            internalType: "uint256",
            name: "fudCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fomoCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "alphaCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "kekCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "craftTime",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamond.Installation[]",
        name: "itemTypes_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class InstallationDiamond__factory {
  static readonly abi = _abi;
  static createInterface(): InstallationDiamondInterface {
    return new utils.Interface(_abi) as InstallationDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InstallationDiamond {
    return new Contract(address, _abi, signerOrProvider) as InstallationDiamond;
  }
}
